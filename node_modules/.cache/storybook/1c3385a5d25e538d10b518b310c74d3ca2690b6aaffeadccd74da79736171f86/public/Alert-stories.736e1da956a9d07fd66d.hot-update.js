"use strict";
self["webpackHotUpdatepuzzlestrap_2025"]("Alert-stories",{

/***/ "./stories/Alert.stories.js":
/*!**********************************!*\
  !*** ./stories/Alert.stories.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   failure: () => (/* binding */ failure),
/* harmony export */   info: () => (/* binding */ info),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./node_modules/lit/index.js");

/**
 * An alert box to notify the user of a result of their action.
 * ## Usage Notes
 * Be careful when using alert. `info` alerts are "respectful" to screen readers and can be used for purely informational contexts. `success`,`warning`, and `failure` alerts, when visible, will interupt the screen reader and jump the user to the alert. These should only be used when necessary to inform the user of a successful or failed action. From MDN:  
 * > Setting role="alert" is equivalent to setting aria-live="assertive" and aria-atomic="true"  
 * > As they don't receive focus, focus does not need to be managed and no user interaction should be required.
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Mega Puzzle/Alert',
  component: 'Alert',
  id: 'alert',
  argTypes: {
    type: {
      control: {
        type: "select"
      },
      options: ["info", "success", "warning", "failure"]
    }
  },
  args: {
    label: "Here's some info",
    type: "info"
  },
  render: ({
    label,
    type
  }) => {
    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`<mp-alert label="${label}" type="${type}"></mp-alert>`;
  },
  parameters: {
    docs: {
      description: {
        component: "An alert box to notify the user of a result of their action.\n## Usage Notes\nBe careful when using alert. `info` alerts are \"respectful\" to screen readers and can be used for purely informational contexts. `success`,`warning`, and `failure` alerts, when visible, will interupt the screen reader and jump the user to the alert. These should only be used when necessary to inform the user of a successful or failed action. From MDN:  \n> Setting role=\"alert\" is equivalent to setting aria-live=\"assertive\" and aria-atomic=\"true\"  \n> As they don't receive focus, focus does not need to be managed and no user interaction should be required."
      }
    }
  }
});
const success = {
  args: {
    label: "Wahoo! You did it.",
    type: "success"
  }
};
const warning = {
  args: {
    label: "Did you mean to do that?",
    type: "warning"
  }
};
const failure = {
  args: {
    label: "Girl, go back and study suh'more.",
    type: "failure"
  }
};
const info = {
  args: {
    label: "Here's some info",
    type: "info"
  }
};
;
const __namedExportsOrder = ["success", "warning", "failure", "info"];
success.parameters = {
  ...success.parameters,
  docs: {
    ...success.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Wahoo! You did it.\",\n    type: \"success\"\n  }\n}",
      ...success.parameters?.docs?.source
    }
  }
};
warning.parameters = {
  ...warning.parameters,
  docs: {
    ...warning.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Did you mean to do that?\",\n    type: \"warning\"\n  }\n}",
      ...warning.parameters?.docs?.source
    }
  }
};
failure.parameters = {
  ...failure.parameters,
  docs: {
    ...failure.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Girl, go back and study suh'more.\",\n    type: \"failure\"\n  }\n}",
      ...failure.parameters?.docs?.source
    }
  }
};
info.parameters = {
  ...info.parameters,
  docs: {
    ...info.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    label: \"Here's some info\",\n    type: \"info\"\n  }\n}",
      ...info.parameters?.docs?.source
    }
  }
};

/***/ })

});
//# sourceMappingURL=Alert-stories.736e1da956a9d07fd66d.hot-update.js.map